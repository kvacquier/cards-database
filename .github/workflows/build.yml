name: ci

on:
  push:

env:
  REGISTRY_IMAGE: |
    ghcr.io/tcgdex/server
    tcgdex/server

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          # - linux/arm/v6
          # - linux/arm/v7
          - linux/arm64
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=edge
            type=ref,event=pr
            type=ref,event=branch,prefix=branch-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=semver,pattern=latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: ${{ !github.event.pull_request.head.repo.fork && github.actor != 'dependabot[bot]' }}

      - name: Login to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}
        if: ${{ !github.event.pull_request.head.repo.fork && github.actor != 'dependabot[bot]' }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ matrix.platform != 'linux/amd64' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: |
            type=image,name=ghcr.io/tcgdex/server,push-by-digest=true,name-canonical=true,push=true
            type=image,name=tcgdex/server,push-by-digest=true,name-canonical=true,push=true


      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.head.repo.fork && github.actor != 'dependabot[bot]' }}
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=edge
            type=ref,event=pr
            type=ref,event=branch,prefix=branch-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=semver,pattern=latest
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Create manifest list and push for each image
        working-directory: /tmp/digests
        run: |
          echo "${{ env.REGISTRY_IMAGES }}" | while read image; do
            docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf "$image@sha256:%s " *);
          done

      - name: Inspect image
        run: |
          echo "${{ env.REGISTRY_IMAGES }}" | while read image; do
            docker buildx imagetools inspect $image:${{ steps.meta.outputs.version }};
          done
